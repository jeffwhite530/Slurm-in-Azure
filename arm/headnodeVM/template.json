{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    // TODO: Add a DNS name for the VM
    // Automate the creatation of the diagnostic storage account and its name
    "parameters": {
        "location": {
            "type": "string"
        },
        "clusterName": {
            "type": "string"
        },
        "networkSecurityGroupRules": {
            "type": "array"
        },
        "subnetName": {
            "type": "string"
        },
        "addressPrefixes": {
            "type": "array"
        },
        "subnets": {
            "type": "array"
        },
        "publicIpAddressType": {
            "type": "string",
            "defaultValue": "Static"
        },
        // TODO: Switch between StandardSSD_LRS and premuim based on dev vs prod deployment type
        "osDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS"
        },
        "virtualMachineSpotInstance": {
            "type": "bool",
            "defaultValue": true
        },
        "virtualMachineSourceIsMarketplace": {
            "type": "bool",
            "defaultValue": true
        },
        "virtualMachineSize": {
            "type": "string",
            "defaultValue": "Standard_E2bs_v5"
        },
        "adminUsername": {
            "type": "string"
        },
        "adminPublicKey": {
            "type": "secureString"
        }
    },
    "variables": {
        "vnetName": "[concat(parameters('clusterName'), '-vnet-', uniqueString(guid(resourceGroup().id)))]",
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]",
        "virtualMachineName": "[concat(parameters('clusterName'), '-vm-', uniqueString(guid(resourceGroup().id)))]",
        "osDiskName": "[concat(variables('virtualMachineName'), '-osDisk')]",
        "networkInterfaceName": "[concat(variables('virtualMachineName'), '-nic')]",
        "publicIpAddressName": "[concat(variables('virtualMachineName'), '-publicip')]",
        "diagnosticsStorageAccountName": "[concat('diagsa', uniqueString(guid(resourceGroup().id)))]",
        "networkSecurityGroupName": "[concat(parameters('clusterName'), '-nsg-', uniqueString(guid(resourceGroup().id)))]",
        "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
        "imgRefComputeGallery": {
            "id": "/subscriptions/8251e869-3bec-4d80-a8ba-959e8caffb89/resourceGroups/Stuff/providers/Microsoft.Compute/galleries/vmImages/images/debian-11-slurm-20/versions/0.0.2"
        },
        "imgRefMarketplace": {
            "publisher": "debian",
            "offer": "debian-11",
            "sku": "11-gen2",
            "version": "latest"
        }
    },
    "resources": [
        {
            "name": "[variables('networkInterfaceName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2021-03-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]",
                                "properties": {
                                    "deleteOption": "Delete"
                                }
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                }
            }
        },
        {
            "name": "[variables('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-02-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": "[parameters('networkSecurityGroupRules')]"
            }
        },
        {
            "name": "[variables('vnetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "subnets": "[parameters('subnets')]"
            }
        },
        {
            "name": "[variables('publicIpAddressName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2019-02-01",
            "location": "[parameters('location')]",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIpAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('virtualMachineName')]"
                }
            },
            "sku": {
                "name": "Standard"
            },
            "zones": [
                "1"
            ]
        },
        {
            "name": "config-app",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "location": "[resourceGroup().location]",
            "apiVersion": "2019-03-01",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'))]"
            ],
            "tags": {},
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false,
                    "timestamp": 123456789
                },
                "protectedSettings": {
                    "commandToExecute": "ansible-playbook -i 127.0.0.1, --limit 127.0.0.1 --connection=local /tmp/slurm-configure.yaml",
                    //"script": "<base64-script-to-execute>",
                    "storageAccountName": "<storage-account-name>",
                    "storageAccountKey": "<storage-account-key>",
                    "fileUris": ["https://.."],
                    "managedIdentity" : "<managed-identity-identifier>"
                }
            }
        },
        {
            "name": "[variables('virtualMachineName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-07-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('osDiskType')]"
                        },
                        "deleteOption": "Delete"
                    },
                    "imageReference": "[if(parameters('virtualMachineSourceIsMarketplace'),
                        variables('imgRefMarketplace'),
                        variables('imgRefComputeGallery')
                    )]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                            "properties": {
                                "deleteOption": "Delete"
                            }
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('virtualMachineName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('adminPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "priority": "[if(parameters('virtualMachineSpotInstance'),
                    'Spot',
                    'Regular'
                )]",
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('diagnosticsStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "identity": {
                "type": "systemAssigned"
            },
            "zones": [
                "1"
            ]
        },
        {
            "name": "[variables('diagnosticsStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "properties": {
                "minimumTlsVersion": "TLS1_2"
            },
            "kind": "Storage",
            "sku": {
                "name": "Standard_LRS"
            }
        }
    ],
    // TODO: Only output the VM's DNS name
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "vmDNS": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).dnsSettings.fqdn]"
        }
    }
}